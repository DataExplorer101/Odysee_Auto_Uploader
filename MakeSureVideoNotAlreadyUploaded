

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
import time
import os
import re
from pynput.keyboard import Key, Controller
from pynput import keyboard
from inspect import currentframe, getframeinfo
from getpass import getpass
from datetime import datetime
from datetime import date
import tkinter as tk
from tkinter import filedialog as fd
# REMEMBER TO ADD FUNCTIONALITY WHERE IF THERE'S A PERIOD AT THE START OF THE TITLE (E.G. ".38 SPECIAL"), IT REMOVES IT

##This function is called by 'songPartAlreadyonOdysee'
def videoalreadyloaded(sFileName,browser):
    print("Fourth function: "+sFileName) 
    ##a video name should never end with an underscore so remove it if it exists:
    if sFileName.endswith("_"):
        sFileName = sFileName.rstrip(sFileName[-1])

    ##a video name should never end with a dash so remove it if it exists:
    if sFileName.endswith("-"):
        sFileName = sFileName.rstrip(sFileName[-1])

    ##Remove any line breaks too:
    sFileName.replace('\r', '').replace('\n', '')


    sFileName = ''.join(sFileName.splitlines())
                    
    sFileName = sFileName.replace("â","")
    sFileName = sFileName.replace("€","")
    sFileName = sFileName.replace("“","")

    ##dont check any file names that are less than 10 characters, they are usally not real matches anyway
    if len(sFileName) < 11:
        return False

    if len(sFileName) < 13 and sFileName.__contains__("-"):
        return False
        
    browser.get('https://odysee.com/'+sFileName)

    
    print("Looking for:" + sFileName+"|")

    ##New method:
    Loop_Toggle = 0

    while Loop_Toggle == 0:
                    try:
                        time.sleep(1.5)
                        theHField = browser.find_element_by_xpath('/html/body/div/div/div[3]/div[2]/main/div/div/div/div/h2')                      
                        
                        if (theHField.text == "No Content Found"):
                            print(sFileName+" is not on Odysee already")
                            return False
                        
                    except:
                        time.sleep(1.0)
                        print("Element not there yet")
##                        try:

                        nVideos = browser.find_elements_by_class_name("button-like");
                        if len(nVideos) > 0:
                            print(sFileName+" is on Odysee already")
                            return True
                        nVideos = browser.find_elements_by_class_name("video-js-parent");
                        if len(nVideos) > 0:
                            print(sFileName+" is on Odysee already")
                            return True
                        nVideos = browser.find_elements_by_class_name("file-page__video-container");
                        if len(nVideos) > 0:
                            print(sFileName+" is on Odysee already")
                            return True
                        nVideos = browser.find_elements_by_class_name("card__subtitle");
                        if len(nVideos) > 0:
                            if nVideos[0].text.__contains__("Copyright"):
                                print(sFileName+" is on Odysee already")
                                return True
##                        nVideos = browser.find_elements_by_class_name("button button--no-style button--file-action button-like");
##                        if len(nVideos) > 0:
##                            print(sFileName+" is on Odysee already")
##                            return True
##                        except:
##                            print("Follow Element not there yet")  
##                                           
                    else:
                        Loop_Toggle = 1

    ##Old Method:
##    nCount = 0
##    while sFileName == browser.title and nCount < 5:
##        print("waiting for page to load")
##        time.sleep(0.5)
##        browser.get('https://odysee.com/'+sFileName)
##        nCount = nCount+1
##    
##    if (str(browser.title) != "Odysee" and str(browser.title) != sFileName):
##        print(sFileName+" is on Odysee already")
##        return True
##    else:
##        print(sFileName+" is not on Odysee already")
##        return False

##This function is called by 'songAlreadyonOdyseeAllowForYear'   
def songPartAlreadyonOdysee(sFileName,browser):
    print("Third function: "+sFileName) 
    ##There are 2 common ways someone could upload a song:

    ##1) with spaces replaced by dashes:
    sFileName1 = sFileName.replace(" ","-")
    sFileName1 = sFileName1.replace("&","-")

    if sFileName1.__contains__(":"):
        print("replacing :")
        sFileName2 = sFileName1.replace(":","--")
        if videoalreadyloaded(sFileName2,browser):
            return True
        print("second replacing :")
        sFileName1 = sFileName1.replace(":","")
        
    print(": should be gone now- "+sFileName1)
    if videoalreadyloaded(sFileName1,browser):
            return True

     ##1b) with spaces replaced by dashes and then 3 dashes replaced by 1 dash:
    if sFileName1.__contains__("---"):
        sFileName1b = sFileName1.replace("---","-")
    
        if videoalreadyloaded(sFileName1b,browser):
            return True

        ##1c) with spaces replaced by dashes and then 3 dashes replaced by 4 dashes:
        sFileName1c = sFileName1.replace("---","----")
    
        if videoalreadyloaded(sFileName1c,browser):
                return True
      
    ##1d)Lets try something else, what if there are no spaces between the dashes, so try replacing any dashes with 3 dashes:
    if sFileName.__contains__("-"):
        sFileName1 = sFileName.replace("-","---").replace(":","")
        sFileName1 = sFileName1.replace(" ","-")
        if videoalreadyloaded(sFileName1,browser):
            return True

    ##exact same as above but replace 1 dash with 2 dashes:
        sFileName1 = sFileName.replace("-","--").replace(":","")
        sFileName1 = sFileName1.replace(" ","-")
        if videoalreadyloaded(sFileName1,browser):
            return True

    ##Try removing brackets but keeping the dashes:
    if sFileName.__contains__("("):
        sFileName1 = sFileName.replace("(","").replace(":","")
        sFileName1 = sFileName1.replace(")","")
        sFileName1 = sFileName1.replace(" ","-")
        
        
        
    ##2) with all spaces and dashes simply removed from the file (to take advantage of claiming the top spot of the most common search method)
    sFileName1 = sFileName.replace(" ","")
 
    sFileName2 = sFileName1.replace("-","")

    sFileName2 = sFileName2.replace("【Drum&Bass】","")
    sFileName2 = sFileName2.replace("[DnB]","")
    sFileName2 = sFileName2.replace("[Drum&Bass]","")

    sFileName2 = sFileName2.replace("*","")
    sFileName2 = sFileName2.replace("|","")
    sFileName2 = sFileName2.replace(":","")
    sFileName2 = sFileName2.replace('"',"")
    sFileName2 = sFileName2.replace("?","")
    sFileName2 = sFileName2.replace("_","")
    sFileName2 = sFileName2.replace("/","")
    sFileName2 = sFileName2.replace("`","")
    sFileName2 = sFileName2.replace(".","")
    sFileName2 = sFileName2.replace("â","")
    sFileName2 = sFileName2.replace("€","")
    sFileName2 = sFileName2.replace("“","")
    sFileName2 = sFileName2.replace("!","")
    sFileName2 = sFileName2.replace("'","")
    sFileName2 = sFileName2.replace("Classics: ","")
    sFileName2 = sFileName2.replace("Classics - ","")
    sFileName2 = sFileName2.replace("NEW * ","")
##    Remove accents:
    sFileName2 = removeAccents(sFileName2)
   
    if videoalreadyloaded(sFileName2,browser):
            return True

    ##)2b) if that did not return true then also try removing any leading "the" (ie TheBeatlesHelp => BeatlesHelp)
    if (sFileName2[0:3]).lower() == "the":
        sFileName3 = sFileName2[3:]
        if videoalreadyloaded(sFileName3,browser):
                return True

    ##2c) try replacing & with and, or removing all together:
    if sFileName2.__contains__("&"):
        sFileName3 = sFileName2.replace("&","and")
        if videoalreadyloaded(sFileName3,browser):
            return True
        sFileName3 = sFileName2.replace("&","")
        if videoalreadyloaded(sFileName3,browser):
            return True

    ##Try without removing dashes:
    sFileName1 = sFileName1.replace("*","")
    sFileName1 = sFileName1.replace("|","")
    sFileName1 = sFileName1.replace(":","")
    sFileName1 = sFileName1.replace('"',"")
    sFileName1 = sFileName1.replace("?","")
    sFileName1 = sFileName1.replace("_","")
    sFileName1 = sFileName1.replace("/","")
    sFileName1 = sFileName1.replace("`","")
    sFileName1 = sFileName1.replace(".","")
    sFileName1 = sFileName1.replace("â","")
    sFileName1 = sFileName1.replace("€","")
    sFileName1 = sFileName1.replace("“","")
    sFileName1 = sFileName1.replace("!","")
    sFileName1 = sFileName1.replace("'","")

    if videoalreadyloaded(sFileName1,browser):
        return True
       
    ##if it passes this far then the file is not on odysee:    
    return False

##This function is called by 'songAlreadyonOdysee'  
def songAlreadyonOdyseeAllowForYear(sFileName,browser):
    ##Song titles on youtube/odysee usualy either contain the year or they dont, lets check for both possibilities:
    print("Second function: "+sFileName)
    ##1) First check the more common scenario (without a year):
    if songPartAlreadyonOdysee(sFileName,browser):
        return True

    ##2) Now check the less common scenario: with year published i.e. (1992)
    ##usually if the year is included then it appears in brackets after the title,
    ##so we just need to strip away all the characters after the open bracket
    
    splitParts = sFileName.split("(")

    if len(splitParts) > 1:
        
        if songPartAlreadyonOdysee(splitParts[0].strip(),browser):
            return True        

        ##also try removing the parenthesis:
        sFileName2 = sFileName.replace("(","").replace(")","")
        if songPartAlreadyonOdysee(sFileName2,browser):
            return True    
        
    splitParts = sFileName.split("[")

    if len(splitParts) > 1:
        
        if songPartAlreadyonOdysee(splitParts[0].strip(),browser):
            return True
        ##also try removing the parenthesis:
        sFileName2 = sFileName.replace("[","").replace("]","")
        if songPartAlreadyonOdysee(sFileName2,browser):
            return True

    splitParts = sFileName.split("{")

    if len(splitParts) > 1:
        
        if songPartAlreadyonOdysee(splitParts[0].strip(),browser):
            return True
        ##also try removing the parenthesis:
        sFileName2 = sFileName.replace("{","").replace("}","")
        if songPartAlreadyonOdysee(sFileName2,browser):
            return True
    
    splitParts = sFileName.split("©")

    if len(splitParts) > 1:
        
        if songPartAlreadyonOdysee(splitParts[0].strip(),browser):
            return True
        ##also try removing the parenthesis:
        sFileName2 = sFileName.replace("©","")
        if songPartAlreadyonOdysee(sFileName2,browser):
            return True
        
    ##if it passes this far then the file is not on odysee:
      
    return False

def songAlreadyonOdysee(sFileName,browser,chName):
    print(chName)
    print("First function: "+sFileName)
    ##Most songs are titled either as the track title or artist - track title, so lets check for both:

    ##First we need to replace a ~ with a - because that is what Odysee does
    sFileName = sFileName.replace("~","-")

    
    ##1)Check for artist - song title:
    if songAlreadyonOdyseeAllowForYear(sFileName,browser):
        return True

    ##2)Now Check just song title:
    ##first split the song name from the artist
    splitParts = sFileName.split("-")

    if len(splitParts) > 1:
        if songAlreadyonOdyseeAllowForYear(splitParts[1].strip(),browser):
            return True
        ##also try flipping the artist and title around (i.e. title - artist)
        sPotentialArtistName = getLeftofAllBrackets(splitParts[1].strip())
        sFileNameReOrdered = sPotentialArtistName.strip()+" - "+splitParts[0]
        if songPartAlreadyonOdysee(sFileNameReOrdered,browser):
            return True

    ##Another thing we can check: if the song has no dashes or (:) then it may be just a song title with no artist name, and the artist name may be the channel name so lets check for that possibility too:
    if sFileName.__contains__("-") == False and sFileName.__contains__(":") == False and chName.strip() != "":
        sChNameAndVidTitle = chName +" - "+sFileName
        if songAlreadyonOdyseeAllowForYear(sChNameAndVidTitle,browser):
            return True
    
    ##if we get this far then we have checked everything:
    return False

def getLeftofAllBrackets(sFileName):

    splitParts = sFileName.split("(")

    if len(splitParts) > 1:        
        sFileName = splitParts[0]
            
    splitParts = sFileName.split("[")

    if len(splitParts) > 1:      
        sFileName = splitParts[0]

    return sFileName

def selectChannel(iChannelNum):

    time.sleep(4)
    keyboard = Controller()
    
    keyboard.press(Key.tab)
    keyboard.release(Key.tab)

    keyboard.press(Key.tab)
    keyboard.release(Key.tab)

    keyboard.press(Key.tab)
    keyboard.release(Key.tab)

    keyboard.press(Key.tab)
    keyboard.release(Key.tab)

    keyboard.press(Key.enter)
    keyboard.release(Key.enter)

    time.sleep(0.3)
    
    for x in range(iChannelNum-1):
        keyboard.press(Key.down)
        keyboard.release(Key.down)
        time.sleep(0.5)

    keyboard.press(Key.enter)
    keyboard.release(Key.enter)


def removeAccents(sFileName):
##    á é í ó ú
##    Á É Í Ó Ú
    sFileName = sFileName.replace("á","a")
    sFileName = sFileName.replace("é","e")
    sFileName = sFileName.replace("í","i")
    sFileName = sFileName.replace("ó","o")
    sFileName = sFileName.replace("ú","u")
    sFileName = sFileName.replace("Á","A")
    sFileName = sFileName.replace("É","E")
    sFileName = sFileName.replace("Í","I")
    sFileName = sFileName.replace("Ó","O")
    sFileName = sFileName.replace("Ú","U")
    return sFileName
    

def MovebyTabs(nNumTabs):
    for x in range(nNumTabs):
        keyboard.press(Key.tab)
        keyboard.release(Key.tab)
    
keyboard = Controller()

Number_of_Times_to_Scroll1 = 0
LOGIN_EMAIL = "BLANK"
LOGIN_PW = "BLANK"
STUFF = "BLANK"
path = "BLANK"
song_file = "BLANK"
video_start = 1
video_end = 1
video_number = 0
Loop_Toggle = 0
line_num = 1
LOOK_FOR_TITLE = 0
Start_Upload = -1
Look_For_Channel_URL = 0
Look_For_Channel_Name = 0

print("What is your Odysee email?")# GET LOGIN INFO FROM USER
LOGIN_EMAIL = input()
while LOGIN_EMAIL == "BLANK":
    time.sleep(0.5)


print("What is your Odysee password? (I promise this will not be recorded outside of using this program)")
LOGIN_PW = getpass()
while LOGIN_PW == "BLANK":
    time.sleep(0.5)

print("What video do you want to start at? (22)")
video_start = int(input())
while video_start == -1:
    time.sleep(0.5)

print("What video do you want to end at? If you're not sure how many videos there are and want to do them all, just type a super big number that you're reasonably sure is bigger than the playlist size and it will run through them all.")
video_end = int(input())
while video_end == -1:
    time.sleep(0.5)
##video_end = 72
print("Where is your song playlist file?")
song_file = input()
while song_file == "BLANK":
    time.sleep(0.5)

print("What is the folder that your video, thumbnail,and description files located?")
STUFF = input()
while STUFF == "BLANK":
    time.sleep(0.5)



print("Please show me where your webdriver is located, including the file name.")
path = input()
while path == "BLANK":
    time.sleep(0.5)



print("What is your channel number (as ordered in the channel drop-down box when you upload a video?")
iChNum = int(input())
while iChNum == -1:
    time.sleep(0.5)

print("Enter up to 5 tags, seperated by commas")
sTags = ""


sSplitTags = sTags.split(",")

driver = webdriver.Chrome(path)
driver.get("https://odysee.com/$/signin")

while True:
    try:
        login = driver.find_element_by_id("username")
        login.send_keys(str(LOGIN_EMAIL))
        login.send_keys(Keys.RETURN)
    except:
        time.sleep(0.5)
    else:
        break

while True:
    try:
        login = driver.find_element_by_id("password")
        login.send_keys(str(LOGIN_PW))
        login.send_keys(Keys.RETURN)
    except:
        time.sleep(0.5)
    else:
        break


driver.get("https://odysee.com/$/upload")
##Select channel
selectChannel(iChNum)
                
songs = open(str(song_file),"r",encoding="utf-8",errors='ignore')

now = datetime.now()
today = date.today()

f_loc = r"C:\Users\garet\Videos\odyseeBot\Uploadathon_Log_On_Date:"

Current_Time = today.strftime("%d_%m_%Y")+"_With_Time"+now.strftime("%H%M%S")



Song_Number = 0
for line in songs:  # GET THE FILE CONTAINING ALL OUR SONG TITLES + URLS AND SET TO VARIABLES SO WE CAN TYPE THEM IN
    line_num += 1 # Keep track of what line we're on.
    
    if str("Now playing") in line:
        
        video_number += 1 # Keep track of what video we're on by using a string that appears once per video.
        print("now on video number" + str(video_number))

    if video_number >= video_start and video_number <= video_end: # We want to increase the video number always so we know where we are, but only actually upload if the video number is within specifications.
        
        if str("Now playing") in line:
            print("Old open here")
           
                       
                        
                        ##driver.get("https://odysee.com/$/upload")
                        # The string "Now playing" occurs exactly once per video, so it's a good marker for going to the upload page.
                                          
        if LOOK_FOR_TITLE == 1 and str('      <https://www.youtube.com/watch?v=') in line: # IF THE URL IS THERE, GET THE PART OF IT. THIS ALSO TELLS US THAT THE TITLE IS DONE SO UNFLAG THE VARIABLE TO STOP GETTING TITLE.
            
            print("Line(-5) is "+line + "line number is: "+ str(line_num))
            URL_PART_1 = line.partition('watch?v=')[2]
            URL_PART_2 = URL_PART_1.partition('&list=')[0]
            Original_URL_Part_1 = line.partition('<')[2]
            Original_URL = Original_URL_Part_1.partition("&list")[0] # This is because I intent to credit original video in description.
            LOOK_FOR_TITLE = 0
            Look_For_Channel_URL = line_num + 2 # This is because I also intent to credit original *channel* and link it in description.
            Start_Upload = line_num + 6 # SINCE WE'RE DONE WITH THE TITLE AND HAVE THE URL, IT'S OKAY TO FLAG THIS NUMBER SO ON THE NEXT LINE WE CAN ACTUALLY START UPLOADING.

        if LOOK_FOR_TITLE == 1 and str('      <https://www.youtube.com/watch?v=') not in line:# and line != str("\n"):  # IF THE URL IS NOT THERE, KEEP GETTING THE TITLE FOR THE UPLOAD TITLE AND DO NOT FLAG THE VARIABLE TO STOP IT
            
            
            if line != "\n":
                if title == "":
                    title = line
                else:
                    title = title + str(" ") + line 

        if str('<https://www.youtube.com/watch?v=') in line and str('      <https://www.youtube.com/watch?v=') not in line and video_number >= 1: # WE'RE PAST THE URL, SO FLAG THE VARIABLE TO START GETTING TITLE
            LOOK_FOR_TITLE = 1
##            print("Line is "+line + "line number is: "+ str(line_num))
            title = ("")
            Song_Number += 1

        if Look_For_Channel_URL == line_num:        # Once we've gotten 3 lines later, we know it's the line with the channel URL, so get it via .partition.
            Channel_URL_Part_One = line.partition("https://www.youtube.com/")[2]
            Channel_URL_Part_Two = Channel_URL_Part_One.partition('>')[0]
            Channel_URL = str('https://www.youtube.com/') + str(Channel_URL_Part_Two)
            Look_For_Channel_Name = line_num + 2
            
        if Look_For_Channel_Name == line_num:           # Once we've gotten another 2 lines later, we know the channel name is there, and since this the one part without any bs, we can just take the whole line.
            Channel_Name = str(line)
##            print("Channel name is "+Channel_Name + "line number is: "+ str(line_num))
           
            print("title we are going to check is "+title)
             ##This is where we will check if the video has already been uploaded, we will be using the video title and youtube URL code for this:
            if songAlreadyonOdysee(title.replace("      ", "").replace("/",""),driver,Channel_Name.replace(" - Topic","")) == False and videoalreadyloaded(URL_PART_2,driver) == False:
                time.sleep(1)
                driver.get("https://odysee.com/$/upload")
    
                sFileName = title.replace(" ","")

                sFileName = sFileName.replace("【Drum&Bass】","")
                sFileName = sFileName.replace("[DnB]-","")
                sFileName = sFileName.replace("[Drum&Bass]-","")
                
                
                
                sFileName = sFileName.replace("-","")
                sFileName = sFileName.replace("-","")
                sFileName = sFileName.replace("*","")
                sFileName = sFileName.replace("|","")
                sFileName = sFileName.replace(":","")
                sFileName = sFileName.replace('"',"")
                sFileName = sFileName.replace("?","")
                sFileName = sFileName.replace("_","")
                sFileName = sFileName.replace("/","")
                sFileName = sFileName.replace("`","")
                sFileName = sFileName.replace(".","")
                sFileName = sFileName.replace("â","")
                sFileName = sFileName.replace("€","")
                sFileName = sFileName.replace("“","")               
                sFileName = sFileName.replace("'","")
                sFileName = sFileName.replace(",","")
                sFileName = sFileName.replace("!","")
                sFileName = sFileName.replace("&","and")
                sFileName = sFileName.replace("~","")
                sFileName = sFileName.replace("|","")
                sFileName = sFileName.replace("Classics","")
                sFileName = sFileName.replace("NEW*","")
                sFileName = sFileName.replace("{Stereo}","")

                
                sFileName = removeAccents(sFileName)

                

                

                splitParts = sFileName.split("(")
                
                if len(splitParts) > 1:
                    sFileName = splitParts[0]


                splitParts = sFileName.split("[")
                
                if len(splitParts) > 1:
                    sFileName = splitParts[0]

                splitParts = sFileName.split("©")
                
                if len(splitParts) > 1:
                    sFileName = splitParts[0]
                
                nCount = 0
                #At this point, we have all the necessary variables for the video, so start inputting them into Odysee.
                while True:# Input URL
                    try:
                        print("Entering File name")
                        print(title)
                        ##URL_Field = driver.find_element_by_id("content_name")
                        URL_Field = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/section[1]/div/div[2]/fieldset-group/fieldset-section[2]/input")
                        print("Found Control")
                        ##-----------------------------This is where the file name gets added-----------------------------------:
                        ##Hydraulic Hydra was uploading videos using the youtube URL, the problem with that is it does not take advantage of odysee's claim system to get the top search result for search terms, we will be using the video title with spaces removed:
                        ##Remove all spaces in title:
                        
                        
                        
                        URL_Field.send_keys(sFileName) #this is the part of the URL used in a URL search, present so such a search will return the vid being uploaded.
                    except:
                        time.sleep(1.0)
                        nCount = nCount+1

##                        if nCount > 3:
##                            MovebyTabs(7)
##                            keyboard.type(sFileName)
                        
##                            break
                        
                    else:
                        break
                Loop_Toggle = 0
                time.sleep(1)

                title = title.replace("      ", "") # So we don't have extra space in our title.               
                title2 = title.replace("â","")
                title2 = title2.replace("€","")
                title2 = title2.replace("“","")
                title2 = title2.replace(".wmv","")
                title2 = title2.replace(".mp4","")
                title2 = title2.replace(".AVI","")
                title2 = title2.replace("(Official Audio)","")
                title2 = title2.replace("(Remastered in 4K)","")
                title2 = title2.replace(" (Official 4K Music Video)","(Official Video)")
                title2 = title2.replace("[HD]","")
                title2 = title2.replace("[HQ]","")
                title2 = title2.replace("【Drum&Bass】","")
                title2 = title2.replace("[DnB] -","")
                title2 = title2.replace("[Drum&Bass]-","")
                title2 = title2.replace("[DnB]-","")
                title2 = title2.replace("[Drum&Bass] -","")
                title2 = title2.replace("©","")
                title2 = title2.replace(" (Free)","")
                title2 = title2.replace(" [FREE]","")
                title2 = title2.replace("NEW * ","")
                                  
                nCount = 0
                while Loop_Toggle == 0:# Get THE TITLE IN THE TITLE FIELD
                    try:
                        ##Title_Field = driver.find_element_by_id('content_title')
                        Title_Field = driver.find_element_by_xpath('/html/body/div/div/div/div/main/div/section[1]/div/div[2]/fieldset-section[1]/input')
                        time.sleep(1.5)
                        Title_Field.send_keys(str(title2)) 
                
##                        Title_Field.send_keys(Keys.SPACE)
##                        Title_Field.send_keys(Keys.BACKSPACE)
##                        keyboard = Controller()
##                        keyboard.type(str(title))
                    except:
                        time.sleep(1.0)
                        nCount = nCount+1

##                        if nCount > 3:
##                            time.sleep(0.5)
##                            MovebyTabs(1)
##                            time.sleep(1.5)
##                            keyboard.type(str(title))
##                            break
                        
                    else:
                        Loop_Toggle = 1

                Loop_Toggle = 0
                

            # CONVERT TITLE TO WHAT THE FILE WILL BE CALLED SO WE CAN SEARCH.
                # We already got rid of instances of 6 white space created as an artifact from saving the playlist as .txt.
                # I tested this: Youtube won't let you have a title with more than 1 whitespace in a row, so that won't be a problem.
                # Also replace all slashes in the title with underlines because that's what youtube-DL did when saving to avoid error.
                # This pertains to Youtube-DL's file naming artifacts.
                # Actually, only convert if the default title is unacceptable.
               
                video_filename = str(title)
                Loop_Toggle = 1
                print(str(video_filename[len(video_filename)-1]))
                
                print("Starting naming convention")
                nCounter = 0
                while True:
                    for file in os.listdir(str(STUFF)):
                        if str(video_filename) in file and str(".mp4") in file and str(".mp4_") not in file and str(".jpg") not in file:
                            print("Found it!")
                            video_filename = str(file)
                            Loop_Toggle = 0
                        else:
                            ##if you cant find it by exact match, try removing all spaces from both files and see if we can find it:
                            file2 = file.replace(" ","")
                            video_filename2 = video_filename.replace(" ","")
                            if str(video_filename2) in file2 and str(".mp4") in file2 and str(".mp4_") not in file2 and str(".jpg") not in file2:
                                print("Found it!")
                                video_filename = str(file)
                                Loop_Toggle = 0
                    if Loop_Toggle == 1:
                        nCounter=nCounter+1
                        ##perhaps skip out after 20 tries:
                        
                        print("Modifying filename as variant of title for video # " + str(video_number))
                        video_filename = video_filename.replace('/', '_')
                        
                        video_filename.replace('\r', '').replace('\n', '')

                        video_filename = ''.join(video_filename.splitlines())
                        
                        if video_filename[len(video_filename)-1] == "*" or video_filename[len(video_filename)-1] == str("|"):
                            print("Yes, final character is asterisk")
                            video_filename = video_filename[0:(len(video_filename)-1)]#This while loop is because if the final character is a | or a *
                        #   print(str(video_filename))                                #Then instead of replacing it, youtube-dl removes it in the naming
                                                                                     #process instead of replacing it with an underscore or different 
                        if video_filename[0] == str('-'):                                             #character. A while loop is safer than if.
                            video_filename = ("_" + video_filename.partition("-")[2]) 

                        video_filename = video_filename.replace("**", "_")                    #I may find other characters that need a similar treatment.
                        video_filename = video_filename.replace("*", "_") #This part was really wierd. Apparantly it replaces asterisks
                        video_filename = video_filename.replace("||", "|")#with underscores UNLESS the asterisk is the final character.
                        video_filename = video_filename.replace("|", "_") # I don't have a clue why it would do this since they're both
                        video_filename = video_filename.replace(": ", " - ")# allowed characters, but ah well.
                        video_filename = video_filename.replace(":", " -")
                        video_filename = video_filename.replace('"', "'")
                        video_filename = video_filename.replace("?", "")
                        video_filename = video_filename.replace("__", "_")
                        video_filename = video_filename.replace("â","")
                        video_filename = video_filename.replace("€","-")
                        print('String is:')
                        print(str(video_filename))
                        #print(video_filename)
                    else:
                        break

                Loop_Toggle = 1


        # OPEN THE FILES FOR THE VIDEOOOOOOOOOOOOOOOO
                while True:
                    try:
                        upload = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/section[1]/div/div[2]/fieldset-section[2]/input-submit/button/span/span")
                        upload.click()
                    except:
                        time.sleep(1.0)
                    else:
                        break
                Loop_Toggle = 0
            #while True:
        #       try:
        #   print(str(STUFF)+str(video_filename))
    #       def test_visible_upload(self):
    #           self.choose_file(driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/section[1]/div/div[2]/fieldset-section[2]/input-submit/button/span/span"), str(STUFF)+str(video_filename))
    #       except:
    #       else:
    #           break


                time.sleep(2)
                keyboard = Controller()
                ##Try a simpler approach:
                keyboard.type(str(STUFF)+str(video_filename))
                time.sleep(0.2)
                keyboard.press(Key.enter)
                keyboard.release(Key.enter)
                
                
##                keyboard.press(Key.ctrl)
##                keyboard.press('l')
##                keyboard.release('l')
##                keyboard.release(Key.ctrl)
##                time.sleep(0.5)
##                print(str(STUFF)+str(video_filename))
####                
##                keyboard.type(str(STUFF))
##                time.sleep(0.2)
##                keyboard.press(Key.enter)
##                keyboard.release(Key.enter)
##                time.sleep(0.2)
##                ##Try 5 tabs:
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.type(str(video_filename))
##                time.sleep(2)
##                keyboard.press(Key.enter)
##                keyboard.release(Key.enter)
                time.sleep(0.5)
                #FIND DESCRIPTION AND CHECK THAT OUT

                print('typing description')
                #while True:
                #       try:
                while True:
                    try:
                        Description_Field = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/div[2]/section[1]/div/div/fieldset-section/div[2]/div/div/textarea[1]")
                    except:
                        time.sleep(1.0) #I think what's happening here is Description_Field exists without being interactable. So it passes to the else
                    else:
                        break
##                while True:
##                    try:
##                        Description_Field.send_keys("")
##                    except:
##                        #keyboard.press(Key.enter)
##                        #keyboard.release(Key.enter)
##                        print('delaying for some reason')
##                        time.sleep(1.0)
##                    else:
##                        break
##                while True:
##                    try:
##                        keyboard.type("")
##                    except:
##                        print('delaying for some reason')
##                        time.sleep(1.0)    #and then fails it. Solution: Simply have the else *as* the try and loop until it goes through. Do that tomorrow.
##                    else:
##                        break
                Loop_Toggle = 0

                video_filename = video_filename.partition(".mp4")[0]
                current_file = open(STUFF+str(video_filename)+".description", "r",encoding="utf-8",errors='ignore')
                print(str(current_file))

                ##wait 1.5 seconds here:
                time.sleep(1.5)

                

                
                      
                for line in current_file:
                    nTries = 0
                    while True:
                        try:
                            print("Line is:" + line + ".")
                            if (line.lower().__contains__("youtube") == False and line.lower().__contains__("youtu.be") == False and line.lower().__contains__("bit.ly") == False and line.lower().__contains__("channel") == False and line.lower().__contains__("smarturl") == False and line != "/n" and line != "" and line.lower().__contains__("myspace") == False and line.lower().__contains__("twitter") == False and line.lower().__contains__("subscribe") == False and line.lower().__contains__("watch more") == False):
                                Description_Field = driver.find_element_by_id("content_description")                            
                                Description_Field.send_keys(str(line))
                                Description_Field.send_keys(Keys.RETURN)
                        except:
                            print('Description_Field not interactable, delaying')
                            time.sleep(1.0)
                            nTries = nTries +1
                            ##after 8 tries skip:
                            if nTries > 8:
                                break
                        else:
                            break
                Description_Field.send_keys(Keys.BACKSPACE)
                Loop_Toggle = 0

              
                #UPLOAD THUMBNAIL
                also_path = STUFF
                video_filename = video_filename.partition(".description")[0]
                for file in os.listdir(str(STUFF)):
                    if str(video_filename) in file and str(".mp4_3.jpg") in file:
                        video_filename = str(file)
                        print(str(video_filename))
                    if str(video_filename) in file and str(".mp4_2.jpg") in file:
                        video_filename = str(file)
                        print(str(video_filename))

                while True:
                    try:
                        Upload_Thumnail = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/div[2]/section[2]/div/div/div/div[2]/fieldset-section/input-submit/button/span/span")
                    except:
                        print("can't find thumbnail upload. Trying something else.")
                        try:
                            Thumbnail_Upload_Tool = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/div[2]/section[2]/div/div/div/div[2]/div/button/span/span")
                            time.sleep(0.5)
                            Thumbnail_Upload_Tool.click()
                        except:
                            print("okay something's seriously wrong here")
                            time.sleep(1.0)
                        else:
                            print("Okay, we found the other button, let's it and see if we get to ")
                    else:
                        try:
                            Upload_Thumnail.click()
                        except:
                            time.sleep(1.0)
                        else:
                            break
                time.sleep(1)                               
            #   while Loop_Toggle == 0:
            #       try:
            #           thumbnail = driver.find_element_by_xpath('/html/body/div[4]/div/div/div/button[1]/span/span')
            #           print("Thumbnail affirmation loop is active. Attempting.")
            #       except:
            #           print("Thumbnail confirm button not found, entering sleep to try again.")
            #           time.sleep(1.0)
            #       else:
            #           Loop_Toggle = 1
            #           print("Confirm thumbnail button found, exiting search loop.")
            #   Loop_Toggle = 0
            #   thumbnail.click()
            #       Number_of_Times_to_Scroll1 = 0
            #       while Number_of_Times_to_Scroll1 < 7:
            #           keyboard.press(Key.tab)
            #           keyboard.release(Key.tab)
            #           Number_of_Times_to_Scroll1 += 1
            #       time.sleep(1)
            #       keyboard.press(Key.enter)
            #       keyboard.release(Key.enter)


            #       Number_of_Times_to_Scroll1 = 0
            #       while Number_of_Times_to_Scroll1 < 2:
            #           keyboard.press(Key.tab)
            #           keyboard.release(Key.tab)
            #           Number_of_Times_to_Scroll1 += 1
            #       time.sleep(1)
            #       keyboard.press(Key.enter)
            #       keyboard.release(Key.enter)

                time.sleep(0.5)

                ##Try a simpler approach:
                keyboard.type(str(STUFF)+str(video_filename))
                time.sleep(0.2)
                keyboard.press(Key.enter)
                keyboard.release(Key.enter)

                
##                keyboard.press(Key.ctrl)
##                keyboard.press('l')
##                keyboard.release('l')
##                keyboard.release(Key.ctrl)
##                ##keyboard.type(str(STUFF)+str(video_filename))
##                keyboard.type(str(STUFF))
##                time.sleep(0.5)
##                keyboard.press(Key.enter)
##                keyboard.release(Key.enter)
##                time.sleep(1)
##                ##Try 5 tabs:
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.press(Key.tab)
##                keyboard.release(Key.tab)
##                time.sleep(2.5)
##                keyboard.type(str(video_filename))
##                time.sleep(3)
##                keyboard.press(Key.enter)
##                keyboard.release(Key.enter)
                time.sleep(0.5)

                
##                print(str(STUFF)+str(video_filename))
##                time.sleep(1)
##                keyboard.press(Key.enter)
##                keyboard.release(Key.enter)


                time.sleep(1)
                while True:
                    print('searching for Yes_Im_Sure')
                    try:
                        Yes_Im_Sure = driver.find_element_by_xpath('/html/body/div[4]/div/div/div/button[1]/span/span')
                        Yes_Im_Sure.click()
                    except:
                        print('trying again')
                        time.sleep(1.0)
                    else:
                        break
                

            #       Number_of_Times_to_Scroll1 = 0
            #       while Number_of_Times_to_Scroll1 < 1:
            #           keyboard.press(Key.tab)
            #           keyboard.release(Key.tab)
            #           Number_of_Times_to_Scroll1 += 1
            #       time.sleep(1)
            #       keyboard.press(Key.enter)
            #       keyboard.release(Key.enter)
            #       time.sleep(0.5)


##            /html/body/div/div/div/div/main/div/div[2]/section[3]/div/div[2]/form/fieldset-section/fieldset-section/input
            ##Input tags:

                
                
                while True:
                    try:
                        tagBox = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/div[2]/section[3]/div/div[2]/form/fieldset-section/fieldset-section/input")
                        
                        for x in range(len(sSplitTags)):
                            tagBox.send_keys(sSplitTags[x].strip())
                            time.sleep(0.5)
                            tagBox.send_keys(Keys.ENTER)
                            time.sleep(0.5)
                    #       print(str(Song_Number))
                        time.sleep(0.5)
                    except:
                        time.sleep(1.0)
                    else:
                        break

            

            #Input Deposit
                while True:
                    try:
                        Deposit = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/div[2]/section[4]/div/div/fieldset-section/input")
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys(Keys.BACKSPACE)
                        Deposit.send_keys("0.0001")
                    #       print(str(Song_Number))
                        time.sleep(0.5)
                    except:
                        time.sleep(1.0)
                    else:
                        break
                #Finalize the upload
                while True:
                    try:
                        print("Searching for upload button...")
                        Upload_Button = driver.find_element_by_xpath("/html/body/div/div/div/div/main/div/section[2]/div/button[1]/span/span")
                    except:
                        print("Upload button not found. Sleeping and trying again...")
                        time.sleep(1.0)
                    else:
                        print("Upload button found. Ending search loop.")
                        break
                while True:
                    try:
                        print("Attempting to click upload button...")
                        Upload_Button.click()
                    except:
                        print("Upload button unclickable. Sleeping and trying again...")
                        time.sleep(1.0)
                    else:
                        print("Upload button clicked successfully. Ending attempt loop.")
                        break
                Loop_Toggle = 0
                time.sleep(1)

                while Loop_Toggle == 0:
                    try:
                        Upload_Button2 = driver.find_element_by_xpath("/html/body/div[4]/div/div/form/section/div/div[3]/div[1]/button[1]/span/span")
                    except:
                        time.sleep(1.0)
                    else:
                        Loop_Toggle = 1
                Loop_Toggle = 0
                while Loop_Toggle == 0:
                    try:
                        Upload_Button2.click()
                    except:
                        time.sleep(1.0)
                    else:
                        Loop_Toggle = 1
                Loop_Toggle = 0

            
                while True:
                    try:
                        driver.find_element_by_xpath("/html/body/div[4]/div/div/section/div/div[3]/div/button[1]/span/span")
                    except:
                        time.sleep(1.0)
                    else:
                        Loop_Toggle = 1
                        print("okay we're at the end of the loop")
                        
                        break
                Loop_Toggle = 0
